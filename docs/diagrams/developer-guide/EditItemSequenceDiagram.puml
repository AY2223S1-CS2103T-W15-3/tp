@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":TrackOParser" as TrackOParser LOGIC_COLOR
participant "parser:EditItemCommandParser" as EditItemCommandParser LOGIC_COLOR
participant "ArgumentTokenizer" as ArgumentTokenizer<<class>> LOGIC_COLOR
participant ":EditItemDescriptor" as EditItemDescriptor LOGIC_COLOR
participant "command:EditItemCommand" as EditItemCommand LOGIC_COLOR
participant "result:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "model:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("editi 1 i/Chair q/20")
activate LogicManager

LogicManager -> TrackOParser : parseCommand("editi 1 i/Chair q/20")
activate TrackOParser

create EditItemCommandParser
TrackOParser -> EditItemCommandParser
activate EditItemCommandParser

EditItemCommandParser --> TrackOParser : parser
deactivate EditItemCommandParser

TrackOParser -> EditItemCommandParser : parse ("1 i/Chair q/20")
activate EditItemCommandParser

EditItemCommandParser -> ArgumentTokenizer : tokenize("1 i/Chair q/20",\n"i/", "q/", "d/", "t/", "/sp", "/cp")
note right: "n/": Prefix for item name inputs\n"q/": Prefix for quantity inputs\n"d/": Prefix for description inputs\n"t/": Prefix for tag inputs\n"sp/": Prefix for sell price inputs\n"cp/": Prefix for cost price inputs
activate ArgumentTokenizer

ArgumentTokenizer --> EditItemCommandParser : args
deactivate ArgumentTokenizer

create EditItemDescriptor
EditItemCommandParser -> EditItemDescriptor
activate EditItemDescriptor

EditItemDescriptor --> EditItemCommandParser : descriptor
deactivate EditItemDescriptor

EditItemCommandParser -> EditItemCommandParser : parseArguments(descriptor, args)
activate EditItemCommandParser
deactivate EditItemCommandParser

create EditItemCommand
EditItemCommandParser -> EditItemCommand : EditItemCommand(1, descriptor)
activate EditItemCommand

EditItemCommand --> EditItemCommandParser : command
deactivate EditItemCommand

EditItemCommandParser --> TrackOParser : command
deactivate EditItemCommandParser

TrackOParser --> LogicManager : command
deactivate TrackOParser
destroy EditItemCommandParser

LogicManager -> EditItemCommand : execute(model)
activate EditItemCommand

EditItemCommand -> Model : getFilteredItemList()
activate Model

Model --> EditItemCommand : filteredItemList
deactivate Model

EditItemCommand -> EditItemCommand : createEditedItem(itemToEdit, descriptor)
activate EditItemCommand

EditItemCommand --> EditItemCommand : editedItem
deactivate EditItemCommand

EditItemCommand -> Model : setItem(itemToEdit, editedItem)
activate Model
deactivate Model

EditItemCommand -> Model : refreshData()
activate Model
deactivate Model

EditItemCommand -> Model : updateFilteredItemList(Model.PREDICATE_SHOW_ALL_ITEMS)
note right: PREDICATE_SHOW_ALL_ITEMS:\nPredicate to show all items
activate Model
deactivate Model

create CommandResult
EditItemCommand -> CommandResult
activate CommandResult

CommandResult --> EditItemCommand
deactivate CommandResult

EditItemCommand --> LogicManager : result
deactivate EditItemCommand

<--LogicManager
destroy EditItemCommand
deactivate LogicManager

@enduml